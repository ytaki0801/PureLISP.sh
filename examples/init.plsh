;;;; list by atom variables

(def list (lambda a a))

;;;; logical functions

(def and (lambda (a b) (cond (a b) (t nil))))

(def or (lambda (a b) (cond (a t) (t b))))

(def null (lambda (a) (eq a nil)))

(def not null)

;;;; utility functions for list processing

(def append2
  (lambda (a b)
    (cond ((null a) b)
          (t (cons (car a) (append2 (cdr a) b))))))

(def flatten
  (lambda (a)
    (cond ((null a) nil)
          (t (append2 (car a) (flatten (cdr a)))))))

(def append (lambda a (flatten a)))

(def reverse
  (lambda (a)
    (cond ((null a) nil)
          (t (append (reverse (cdr a))
                     (list (car a)))))))

(def map
  (lambda (f a . b)
     (cond ((eq a nil) nil)
           ((eq b nil)
            (cons (f (car a))
                  (map f (cdr a))))
           (t
            (cons (f (car a) (car (car b)))
                  (map f (cdr a) (cdr (car b))))))))

(def pairs (lambda (a b) (map cons a b)))

(def assoc
  (lambda (k vs)
     (cond ((null vs) nil)
           ((eq (car (car vs)) k)
            (car vs))
           (t (assoc k (cdr vs))))))

(def member
  (lambda (k vs)
     (cond ((null vs) nil)
           ((eq (car vs) k) vs)
           (t (member k (cdr vs))))))

(def filter
  (lambda (f x)
     (cond ((null x) nil)
           ((f (car x))
            (cons (car x) (filter f (cdr x))))
           (t (filter f (cdr x))))))

(def reduce
  (lambda (f L i)
     (cond ((null L) i)
           (t (f (car L) (reduce f (cdr L) i))))))

(def sublis
  (lambda (al L)
    (cond ((null L) nil)
          (t (cons (let ((r (assoc (car L) al)))
                     (cond ((null r) (car L))
                           (t (cdr r))))
                   (sublis al (cdr L)))))))

;;;; lambda calculus

(def fix (lambda (f) (f (lambda (x) ((fix f) x)))))

;;;; conscell accessors

(def caar (lambda (x) (car (car x))))

(def cadr (lambda (x) (car (cdr x))))

(def cdar (lambda (x) (cdr (car x))))

(def cddr (lambda (x) (cdr (cdr x))))

;;;; Common Lisp compatibility

(def defun
  (macro (name args body)
    (list 'def name (list 'lambda args body))))

(def defmacro
  (macro (name args body)
    (list 'def name (list 'macro args body))))

;;;; Scheme compatibility

(def define
  (macro (name . body)
    (cond ((atom name) (list 'def name (car body)))
          (t (cons 'defun
                   (cons (car name)
                         (cons (cdr name) body)))))))

(def eq? eq)

(def null? null)

(def pair? (lambda (x) (not (atom x))))

(def #t t)

(def #f nil)

(def else #t)

(def assq assoc)

;;;; other syntax sugars by macro

(def if
  (macro (condexp trueexp . falseexp)
    (list 'cond (list condexp trueexp)
      (cond ((null falseexp) (list 't 'nil))
            (t (list 't (car falseexp)))))))

(def let
  (macro (vvs body)
    (cons (list 'lambda (map car vvs) body)
          (map cadr vvs))))

(def define-macro
  (macro (name . body)
    (list 'def (car name)
          (list 'macro (cdr name)
                       (car body)))))

